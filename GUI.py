# -*- coding: utf-8 -*-
import PySimpleGUI as sg
import os.path
from datetime import date
import Projet2
import re
import fenetreResultats
import json
import popupCalcul


####################################################################################################################################
###IMAGES
####################################################################################################################################

blackTurbinIconBase64 = ""
blueTurbinIconBase64 = ""


####################################################################################################################################
###GLOBAL VARIABLES
####################################################################################################################################
#Variables non enregistrées
sg.theme("SystemDefault1")
debitString = "Debit"
execDirectory = os.getcwd()
inputWithFileChanged = False
inputWithoutFileChanged = False
defaultDebits = [160] * 5

#Fenetre de l'ap
_VARS = {'window': False}

#Variables enregistrées
limitationDebits = defaultDebits
debitTotal = 0 
niveauAmont = 0
entete = 2
lignesDonnees = 20
colonneDebit = "C"
colonneAmont = "F"
results = []
saveFilePath = ""
dataFilePath = ""
lastInput = ""
isUsingFile = False
isSavingFile = False

####################################################################################################################################
###LOAD AND SAVE FUNCTIONS
####################################################################################################################################


#Met à jour les variables globales avec celles enregistrées de la dernière session
def loadVariablesFromFile() :
    global limitationDebits
    global debitTotal 
    global niveauAmont
    global entete
    global lignesDonnees
    global colonneDebit
    global colonneAmont
    global results
    global lastInput
    global saveFilePath
    global dataFilePath
    global isUsingFile
    global isSavingFile
    try:
        with open("ConfigFile", "r") as fp:   # Unpickling
            [limitationDebits, debitTotal, niveauAmont, entete, lignesDonnees, colonneDebit, colonneAmont,  results, lastInput, saveFilePath, dataFilePath, isSavingFile, isUsingFile] = json.load(fp)
    except:
        print("Pas de fichier")
  
#Enregistre les variables entrables dans un fichier
def saveVariablesInFile():
    global limitationDebits
    global debitTotal 
    global niveauAmont
    global entete
    global lignesDonnees
    global colonneDebit
    global colonneAmont
    global results
    global lastInput
    global saveFilePath
    global dataFilePath
    global isUsingFile
    global isSavingFile
    
    toSaveList = [limitationDebits, debitTotal, niveauAmont, entete, lignesDonnees, colonneDebit, colonneAmont,  results, lastInput, saveFilePath, dataFilePath, isSavingFile, isUsingFile]
    with open("ConfigFile", "w") as fp:
        json.dump(toSaveList, fp)
        
#Essai de load des variables
loadVariablesFromFile()

####################################################################################################################################
###EVENT FUNCTIONS
####################################################################################################################################

#Au clic sur une des images de turbine
def TurbineButtonClick(turbine):
    global inputWithoutFileChanged
    global inputWithFileChanged
    
    #Modification des inputs donc recalcul nécessaire
    inputWithoutFileChanged = True
    inputWithFileChanged = True
    
    if  turbine.metadata == "Blue":
        Disactivate(turbine)
    else :
       Activate(turbine)

#Désactivation de la turbine associée à l'évenement "turbine"
def Disactivate(turbine):
    event = turbine.Key
    turbine.Update(image_data=blackTurbinIconBase64)
    turbine.set_tooltip("Activer la turbine " + event[-1])
    turbine.metadata = "Black"
    limitationDebits[int(event[-1]) - 1] = 0
    debitField = _VARS['window'][debitString + event]
    debitField.Update("0", disabled = True)
    
    print("Disactivated " + event)
    print(limitationDebits)

#Activation de la turbine associée à l'évenement "turbine"    
def Activate(turbine):
    event = turbine.Key
    turbine.Update(image_data=blueTurbinIconBase64)
    turbine.metadata = "Blue"
    turbine.set_tooltip("Désactiver la turbine " + event[-1])
    debitField = _VARS['window'][debitString + event]
    debitField.Update(debitField.metadata, disabled = False)
    limitationDebits[int(event[-1]) - 1] = int(debitField.metadata)
    print("Activated " + event)
    print(limitationDebits)
    
    
#Permet de limiter la saisie d'un champ à un nombre flottant (avec "," et ".")
def UpdateInputNumber(event, values, forceZero = False):
    global niveauAmont
    global debitTotal
    global limitationDebits
    global inputWithoutFileChanged
    global inputWithFileChanged
    inputValue = _VARS['window'][event]
    previousValue = inputValue.metadata
    #Si le champ est désactivé la saisie est ignorée
    if inputValue.Widget["state"] == "readonly":
        return
    if values[event] != "" :
        #Vérifier que la valeur est un flottant
        if not re.search('[^(\d|,|\.)]', values[event]) :
            #Mise en forme avec un "."
            newValue = values[event].replace(',','.')
            #Éviter de devoir supprimer le 0, suppression auto
            if previousValue == "0" and  newValue != "0":
                newValue = newValue.replace("0","")
            #Mise à jour des valeurs du champs et des variables associées
            inputValue.metadata = newValue
            inputValue.Update(newValue)
            if event == "DebitTotal" :
                debitTotal = float(newValue)
            elif debitString in event :
                limitationDebits[int(event[-1]) - 1] = float(newValue)
            elif event == "NiveauAmont" :
                niveauAmont = float(newValue)
                
            #Une valeur a été modifiée, il faudra recalculer le résultat
            inputWithoutFileChanged = True
            inputWithFileChanged = True
        else :
            #Si ce n'est pas un flottant, on ignore la saisie en recopiant la dernière valeur enregistrée
            values[event] = previousValue
            inputValue.Update(values[event])
    else :
        #Ne pas autoriser la valeur ""
        if forceZero :
            inputValue.metadata = "0"
            if event == "DebitTotal" :
                debitTotal = 0
            elif debitString in event :
                limitationDebits[int(event[-1]) - 1] = 0
            elif event == "NiveauAmont" :
                niveauAmont = 0
            inputValue.Update(0)
        else : 
            inputValue.metadata = ""

#Permet de limiter la saisie d'un champ à un entier
def UpdateInputInt(event, values, forceZero = False):
    global entete
    global lignesDonnees
    global inputWithFileChanged
    
    inputValue = _VARS['window'][event]
    previousValue = inputValue.metadata
    
    #Si le champ est désactivé la saisie est ignorée
    if inputValue.Widget["state"] == "readonly":
        return
    
    if values[event] != "" :
        try :
            #Vérifier si la conversion est possible
            newValue = str(int(values[event]))
            
            #Éviter de devoir supprimer le 0, suppression auto
            if previousValue == "0" and  newValue != "0":
                newValue = newValue.replace("0","")
                
            #Mise à jour des valeurs du champs et des variables associées
            inputValue.metadata = newValue
            inputValue.Update(newValue)
            if event == "-ENTETE-" :
                entete = int(newValue)
            elif event == "-LIGNESDONNEES-" :
                lignesDonnees = int(newValue)
                
            #Une valeur a été modifiée, il faudra recalculer le résultat (seulement en cas d'utilisation d'un fichier car les champs entier ne sont utilisés que là)    
            inputWithFileChanged = True
        except :
            #Si ce n'est pas un entier, on ignore la saisie en recopiant la dernière valeur enregistrée
            values[event] = previousValue
            inputValue.Update(values[event])
    else :
        #Ne pas autoriser la valeur ""
        if forceZero :
            inputValue.metadata = "0"
            if event == "-ENTETE-" :
                entete = 0
            elif event == "-LIGNESDONNEES-" :
                lignesDonnees = 0
            inputValue.Update(0)
        else : 
            inputValue.metadata = "" 
   
#Permet de limiter la saisie d'un champs à une lettre de colonne excel
def UpdateInputColumn(event, values):
    global colonneDebit
    global colonneAmont
    global inputWithFileChanged
    
    inputValue = _VARS['window'][event]
    previousValue = inputValue.metadata
    
    #Si le champ est désactivé la saisie est ignorée
    if inputValue.Widget["state"] == "readonly":
        return
    
    if values[event] != "" :
        #Vérifier que la valeur est une lettre
        if not re.search('[^a-zA-Z]', values[event]) :
            #Mise en forme en majuscule
            newValue = values[event].upper()
            
            #Mise à jour des valeurs du champs et des variables associées
            inputValue.metadata = newValue
            inputValue.Update(newValue)
            if event == "-COLONNEDEBIT-" :
                colonneDebit = newValue
            elif event == "-COLONNEAMONT-" :
                colonneAmont = newValue
                
            #Une valeur a été modifiée, il faudra recalculer le résultat (seulement en cas d'utilisation d'un fichier car les champs entier ne sont utilisés que là)                
            inputWithFileChanged = True
        else :
            #Si ce n'est pas une lettre, on ignore la saisie en recopiant la dernière valeur enregistrée
            values[event] = previousValue
            inputValue.Update(values[event])
    else :
        inputValue.metadata = ""   
    
#Renvoie le chemin vers le fichier de sauvegarde  
def GetSimulationPath(rootFolderPath, fileName = ""):
    if fileName == "" :
        fileName= str(date.today()) + ".xlsx"
    else : 
        fileName= fileName + ".xlsx"
    return os.path.join(rootFolderPath, fileName)

#Cache ou affiche la section pour l'utilisation d'un fichier de données    
def showOrHideFileInput(useFile, values):
    #Affiche ou non la section et cache l'opposée
    _VARS['window']["-COLUMNWITHOUTFILE-"].Update(visible = not useFile)
    _VARS['window']["-COLUMNWITHFILE-"].Update(visible = useFile)
    #Désactivation du bouton de simulation si aucun fichier de données n'est renseigné, et réactivation si l'option est désactivée
    if useFile and values["-DATAFILE-"] == "" :
        _VARS['window']["SimulationButton"].Update(disabled = True)
        _VARS['window']['SimulationButton'].SetTooltip("Entrez un fichier de données")
    elif not useFile :
        _VARS['window']['SimulationButton'].update(disabled=False)
        _VARS['window']['SimulationButton'].SetTooltip(None)

#Cache ou affiche la section pour l'utilisation d'un fichier de sauvegarde    
def showOrHideFileSave(saveToFile, values):
    #Affiche ou non la section
    _VARS['window']["-SAVEFILECOLUMN-"].Update(visible = saveToFile)
    #Désactivation du bouton de simulation si aucun fichier de sauvegarde n'est renseigné, et réactivation si l'option est désactivée
    if values["-FOLDER-"] == "" and saveToFile :
        _VARS['window']['SimulationButton'].update(disabled=True)
        _VARS['window']['SimulationButton'].SetTooltip("Saisir où enregistrer les résultats")
    elif not saveToFile :
        _VARS['window']['SimulationButton'].update(disabled=False)
        _VARS['window']['SimulationButton'].SetTooltip(None)

####################################################################################################################################
###LAYOUT FUNCTIONS
####################################################################################################################################

#Crée une colonne qui est par la suite cachable
def collapse(layout, key, defaultState = True):
    return sg.pin(sg.Column(layout, key=key, visible=defaultState))

#Fonction de création d'un bouton avec l'image de turbine ---- Si le débit est de 0 la turbine est considérée désactivée --- Cette fonction facilite la création des 5 boutons
def ButtonLayout(i) :
   if limitationDebits[i-1] >0 :
       IMAGE = blueTurbinIconBase64
       TOOLTIP = "Désactiver la turbine " + str(i)
       METADATA = "Blue"
       PREVIOUS_VALUE = str(limitationDebits[i-1])
   else :
       IMAGE = blackTurbinIconBase64
       TOOLTIP = "Activer la turbine " + str(i)
       METADATA = "Black"
       PREVIOUS_VALUE = str(defaultDebits[i-1]) #Valeur par défaut
   return [
                [sg.Button('', image_data= IMAGE , button_color=(sg.theme_background_color(),sg.theme_background_color()),
                            border_width=0, key='Turbine'+ str(i), tooltip = TOOLTIP , metadata = METADATA)],
                [sg.Text("Débit Max : "), sg.InputText(str(limitationDebits[i-1]), size =(7,1), key = debitString + 'Turbine'+ str(i), 
                                                       enable_events=True, metadata = PREVIOUS_VALUE), sg.Text("m3/s")]
   ]

    
    
####################################################################################################################################
###LAYOUT
####################################################################################################################################

#Création des variables si une path a été sauvegardée dans le fichier de configuration
if saveFilePath != "" : 
    splittedPath = saveFilePath.split("\\")
    folderPath = splittedPath[0]
    fileName = splittedPath[1].replace(".xlsx","")
else :
    folderPath =""
    fileName = ""
    
#Section du fichier de sauvegarde
saveFileColumn  = [
    [
        sg.Text("Enregistrer sous : "),
        sg.In(folderPath, size=(25, 1), enable_events=True, key="-FOLDER-", disabled = True, readonly= True),
        sg.FolderBrowse('Parcourir'),
    ],
    [
        sg.Text("Nom du fichier : "),
        sg.In(fileName, size=(22, 1), enable_events=True, key="-FILE-"),
    ],
    [
     sg.Text("Simulation enregistrée dans : "),
     
    ],
    [
     sg.Text(saveFilePath, size=(46, 1), key="-TOUTFOLDER-")
    ]
]

#Colonne des paramètres (fichier de sauvegarde + boutons simuler et résultat)
settingsColumn = [
    [sg.Push(), 
             sg.Text("Sauvegarder les résultats", enable_events=True, key="-SAVERESULTS-TEXT-"), 
             sg.Checkbox('', default=isSavingFile, key = "-SAVERESULTS-", enable_events=True)]
    ,
    [collapse(saveFileColumn, "-SAVEFILECOLUMN-", isSavingFile)],
    [sg.Button(button_text="Simuler", size=(46, 3), key="SimulationButton")],
    [sg.Button(button_text="Résultats", size=(46, 3), key="-VIEWRESULTS-",disabled=True, tooltip ="Lancez la simulation")],

]

#Champs en haut à gauche dans le cas d'une saisie manuelle
rightParametersColumnWithoutFile = [
    [sg.Text("Débit Total : "), 
     sg.InputText(str(debitTotal), size =(7,1), key ='DebitTotal', enable_events=True, metadata = str(debitTotal)), 
     sg.Text("m3/s"), 
     sg.Text("Niveau Amont : "), 
     sg.InputText(str(niveauAmont), size =(5,1), key ='NiveauAmont', enable_events=True, metadata = str(niveauAmont)),
     sg.Text("m")],
]

#Champs en haut à gauche dans le cas d'un fichier de données
rightParametersColumnWithFile = [
    [sg.Text("Fichier de données : "),
     sg.In(dataFilePath, size=(25, 1), enable_events=True, key="-DATAFILE-", disabled = True, readonly= True),
     sg.FileBrowse('Parcourir'),
     sg.Text("Nombre de lignes d'en-tête"), 
     sg.InputText(str(entete), size =(4,1), key ='-ENTETE-', enable_events=True, metadata = str(entete)), 
     sg.Text("Nombre de lignes de données"), 
     sg.InputText(str(lignesDonnees), size =(4,1), key ='-LIGNESDONNEES-', enable_events=True, metadata = str(lignesDonnees)),
     sg.Text("Colonne des débits"), 
     sg.InputText(colonneDebit, size =(3,1), key ='-COLONNEDEBIT-', enable_events=True, metadata = colonneDebit), 
     sg.Text("Colonne des niveaux amonts"), 
     sg.InputText(colonneAmont, size =(3,1), key ='-COLONNEAMONT-', enable_events=True, metadata = colonneAmont),
     ],
]

#Checkbox d'utilisation d'un fichier de données
leftParametersColumn = [
    [sg.Text("Utiliser un fichier de données", enable_events=True, key="-USEFILE-TEXT-"), 
     sg.Checkbox('', default=isUsingFile, key = "-USEFILE-", enable_events=True),
     ]
]

#Layout général
layoutScreenWindow = [
    [[collapse(rightParametersColumnWithoutFile, "-COLUMNWITHOUTFILE-", not isUsingFile), collapse(rightParametersColumnWithFile, "-COLUMNWITHFILE-", isUsingFile),sg.Push(), sg.Column(leftParametersColumn)]],
    [
        [sg.Column(ButtonLayout(i), element_justification='c') for i in range(1,6)] + [sg.vtop(sg.Column(settingsColumn))] ,
    ]


]

#Création de la fenetre
_VARS['window'] = sg.Window("Simul Barrage 3000", layoutScreenWindow, return_keyboard_events=True, finalize=True, size=(1580,335))
while True:
    #Lecture de la fenetre 
    event, values = _VARS['window'].read()
    print(event)
    if event == "Exit" or event == sg.WIN_CLOSED:
        break
    elif event == "DebitTotal" :
        #Une modification de la valeur dans le champs du débit total
        UpdateInputNumber(event, values)
    elif debitString in event :
        #Une modification de la valeur dans les champs de débit max
        UpdateInputNumber(event, values, True)
    elif "Turbine" in event :
        #Clic sur un bouton de turbine
        element = _VARS['window'][event]
        TurbineButtonClick(element)
    elif "COLONNE" in event :
        #Une modification de la valeur dans les champs de colonnes
        UpdateInputColumn(event, values)
    elif event == "NiveauAmont" :
        #Une modification de la valeur dans le champs du niveau amont
        UpdateInputNumber(event, values)
    elif event == "-ENTETE-" :
        #Une modification de la valeur dans le champs du nombre de lignes d'entete
        UpdateInputInt(event, values, True)
    elif event == "-LIGNESDONNEES-" :
        #Une modification de la valeur dans le champs du nombre de lignes de données dans le fichier
        UpdateInputInt(event, values, True)
    elif event == "-FILE-":
        #Une modification de la valeur dans le nommage d'un fichier de sauvegarde
        folder = values["-FOLDER-"]
        file = values["-FILE-"]
        if not folder =="" :
            #On regenere le chemin avec le nouveau nom
            path = GetSimulationPath(folder, file)
            _VARS['window']["-TOUTFOLDER-"].update(path)
            #Affectation pour la sauvegarde
            saveFilePath = path
    elif event.startswith("-USEFILE-"):
         #Une modification de la valeur de la checkbox pour sélectionner l'entrée par un fichier de données
         #Affectation pour la sauvegarde
         isUsingFile = not isUsingFile
         showOrHideFileInput(isUsingFile, values)
         _VARS['window']["-USEFILE-"].Update(value = isUsingFile)
    elif event.startswith("-SAVERESULTS-") :
        #Une modification de la valeur de la checkbox pour sélectionner la sauvegarde dans un fichier
        #Affectation pour la sauvegarde
        isSavingFile = not isSavingFile
        showOrHideFileSave(isSavingFile, values)
        _VARS['window']["-SAVERESULTS-"].Update(value = isSavingFile)
    elif event == "-DATAFILE-":
        #Une modification de la valeur dans la selection d'un fichier de données
        if not values["-DATAFILE-"] =="" :
            _VARS['window']['SimulationButton'].update(disabled=False)
            _VARS['window']['SimulationButton'].SetTooltip(None)
            dataFilePath = values["-DATAFILE-"]
    elif event == "-FOLDER-":
        #Une modification de la valeur dans la selection d'un fichier de sauvegarde
        folder = values["-FOLDER-"]
        if not folder =="" :
            #On peut maintenant simuler
            _VARS['window']['SimulationButton'].update(disabled=False)
            _VARS['window']['SimulationButton'].SetTooltip(None)
            #On genere le chemin avec le nom de fichier s'il est renseigné
            path = GetSimulationPath(folder, values["-FILE-"])
            _VARS['window']["-TOUTFOLDER-"].update(path)
            #Affectation pour la sauvegarde
            saveFilePath = path
    elif event == "SimulationButton" :
        #Clic sur le bouton de simulation
        
        #Soit utilisation du fichier de données ou saisie manuelle:
        #Si aucun input n'a changé depuis la dernière simulation le résultat n'a pas changé donc on évite le recalcul
        if values["-USEFILE-"] and (inputWithFileChanged or lastInput != "WithFile") :
            debits_simules = []
            puissances_simules = []
            puissances_totales_simules = []
            myPopup = popupCalcul.createPopupCalcul()
            #Lancement de l'algorithme du projet 2 avec la lecture du fichier de données
            try :
                for [debit, amont] in Projet2.readExcelValues(entete, lignesDonnees, colonneAmont, colonneDebit, values["-DATAFILE-"]) :
                    [debits, puissances, puissance_totale] = Projet2.optimisation(amont, debit, limitationDebits)
                    debits_simules.append(debits)
                    puissances_simules.append(puissances)
                    puissances_totales_simules.append(puissance_totale)
                results = [debits_simules, puissances_simules,puissances_totales_simules]
                myPopup.close()
            except :
                results = None
                myPopup.close()
                sg.Popup("Erreur de lecture, veuillez vous assurer des informations dans le fichier", title="Erreur à la lecture", button_color= "red")
            
            #Mise à jour des variables pour éviter le recalcul
            lastInput = "WithFile"
            inputWithFileChanged = False
        if not values["-USEFILE-"] and (inputWithoutFileChanged or lastInput != "WithoutFile"):
            print("NOT IGNORED")
            #Lancement de l'algorithme du projet 2
            results = Projet2.optimisation(niveauAmont, debitTotal, limitationDebits)
            
            #Mise à jour des variables pour éviter le recalcul
            lastInput = "WithoutFile"
            inputWithoutFileChanged = False
        if results != None:
            #Si activation du fichier de sauvegarde
            if values["-SAVERESULTS-"]:
                try :
                    #Appel d'une fonction inspirée de celle du projet 2
                    Projet2.saveResultFile(results, GetSimulationPath(values["-FOLDER-"], values["-FILE-"]))
                except :
                    #Si échec de la sauvegarde c'est que le fichier est ouvert, on l'afffiche à l'utilisateur
                    sg.Popup("Le fichier de sauvegarde est ouvert dans un autre programme, relancez la simulation pour sauvegarder", title="Erreur à la sauvegarde", button_color= "red")
            #Activation du bouton de visualisation des résultats
            _VARS['window']["-VIEWRESULTS-"].update(disabled=False)
            _VARS['window']["-VIEWRESULTS-"].set_tooltip(None)
        else :
            _VARS['window']["-VIEWRESULTS-"].update(disabled=True)
            _VARS['window']["-VIEWRESULTS-"].set_tooltip("Erreur de calcul")
        
    elif event =="-VIEWRESULTS-" :
        #Clic sur le bouton des résultats
        #On affiche la fenêtre (définie dans le fichier fenetreResultats)
        fenetreResultats.createResultWindow(results)
        
#A la fermeture on sauvegarde les valeurs des champs
saveVariablesInFile()
_VARS['window'].close()
    
